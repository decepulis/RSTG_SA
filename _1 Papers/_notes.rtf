{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 InputMono-Bold;\f1\fnil\fcharset0 InputMono-Regular;\f2\fnil\fcharset0 InputMono-Italic;
\f3\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid101\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid201\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid301\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid401\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid501\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid601\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}}
\margl1440\margr1440\vieww14200\viewh16580\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs20 \cf0 Index of Papers
\f1\b0 \
\

\f0\b ICSE
\f1\b0 \
5 Ongoing software development without classical requirements\
15 Recovering from a decade: a systematic mapping of information retrieval approaches to software traceability\
25 Case studies in just-in-time requirements analysi\
29  Finkelstein. Contribution structures.\
33 An analysis of requirements evolution in open source projects: recommendations for issue trackers\
40 Patterns of continuous requirements clarification\
46 Strategic traceability for safety-critical project\
60 Preventing defects: the impact of requirements traceabil- ity completeness on software quality\
62 Understanding the requirements for developing open source software systems\
\
7 Apache Software Foundation. http://www.apache.org. Last accessed: Aug 2017.\
38 JBoss Family of Lightweight Cloud-Friendly Enterprise-Grade Products. http: //www.jboss.org. Last accessed: Aug 2017.\
\

\f0\b Additionally
\f1\b0 \
Pirolli, P. and Card, S. 1995. Information foraging in infor- mation access environments. ACM Conf. Human Factors in Comp. Sys. (CHI), 51\'9658.\
\
E. Chi, P. Pirolli, K. Chen, and J. Pitkow, \'93Using Information\
Scent to Model User Information Needs and Actions on the Web,\'94 Proc. ACM Conf. Human Factors in Computing Systems, pp. 490-497, 2001.\
\
\

\f0\b Notes
\f1\b0 \
\ul 1.01 Foraging and navigations, fundamentally developers predictions of value and cost\ulnone \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\i \cf0 Important Notes
\f1\i0 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	
\f3 \uc0\u8259 
\f1 	}How well can developers predict the value and cost of their navigation choices?\
{\listtext	
\f3 \uc0\u8259 
\f1 	}software engineering re- searchers to produce tools that help to reduce developers\'92 naviga- tion costs as they look for the information they need [8, 17, 18, 19, 22, 30, 33, 43]\
{\listtext	
\f3 \uc0\u8259 
\f1 	}IFT has already proven useful for explaining and predicting developer behaviors during software maintenance, in ways beneficial to tool design [12, 16, 17, 25, 26, 27, 33].\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f2\i Background to Steal
\f1\i0 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0\cf0 {\listtext	
\f3 \uc0\u8259 
\f1 	}IFT\'92s main constructs are a predator (here, a developer) who seeks prey (the developer\'92s information goals) within an infor- mation environment made up of information patches (in this pa- per, Java methods) connected by links (here, IDE features for navigating between methods; e.g., search-results links, clickable links to a method, adjacent methods via scrolling). Each link has a cost (time to get from one patch to the other) that is influenced by both system performance and the human\'92s cognitive and phys- ical speed. Fig. 1 shows the information environment in this pa- per.\
{\listtext	
\f3 \uc0\u8259 
\f1 	}Within each patch are information features (here, words, phrases, and graphics in the code or documentation), some of which may be the prey that the predator seeks. Information features have value, and they also have cost (e.g., time for the human to read and process them). Some of the information features are cues that label outgoing links to other patches. Cues (the labels on the links) provide the predator with hints about what information features may be found at the other end of the link. Fig. 2 conceptually illustrates two patches with information features, cues, and links. In modern development environments, like Eclipse, most dis- played text has some form of clickable link (e.g., the Open Decla- ration shortcut on identifiers in the Editor), so there tends to be a high density of cues in such environments.\
{\listtext	
\f3 \uc0\u8259 
\f1 	}IFT\'92s constructs are tied together via IFT\'92s central proposition, which says that the predator treats foraging as an optimization\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\ul 1.01 PFIS1a\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls3\ilvl0\cf0 \ulnone {\listtext	
\f3 \uc0\u8259 
\f1 	}To apply the theory to real-world debugging, we developed the following operational definitions. Some constructs have self-evident operationalizations. We oper- ationalize the prey construct as places in the code where changes must be made to fix the bug, the predator construct as a programmer, and the patch construct as localities in the source code, such as Java methods, classes, and packages. The notions of topology, cues, and scent do not map obviously to operational definitions. We operationalize these constructs as follows\'85\
{\listtext	
\f3 \uc0\u8259 
\f1 	}The measure of scent warrants further explanation. Information scent is the programmer\'92s (imperfect) percep- tion of the value (relatedness) of information (as in Pirolli\'92s information foraging research on web searching [33]). To computationally approximate information scent, we com- pute word similarity between the description of the prey (e.g., bug-report text) and the proximal cues in the source code by applying cosine similarity to a vector space IR model. Note that this operational definition is the model\'92s approximation of scent; the true measure of scent exists only in the programmer\'92s head.\
{\listtext	
\f3 \uc0\u8259 
\f1 	}PFIS is based upon the web user flow by information scent (WUFIS) algorithm [6], which combines information retrieval techniques with spreading activation. As WUFIS does for web path following, PFIS calculates the probability that a programmer will follow a particular \'93link\'94 from one class or method in the source code to another, given a specific information need.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f2\i Background to Steal
\f1\i0 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls4\ilvl0\cf0 {\listtext	
\f3 \uc0\u8259 
\f1 	}Information foraging theory [34] is an example of a rational analysis that has emerged in the last decade as a way to explain how people seek, gather, and make use of information. Like all rational analyses, information foraging theory assumes that humans have evolved to be well adapted to the excessive information in the world around them, and that they behave accordingly in information spaces. The basic idea is that, given the plethora of irrelevant information in the environment, humans have evolved strategies to efficiently find information relevant to their needs without processing everything\'97in essence, minimizing the mental cost to achieve their goals.\
{\listtext	
\f3 \uc0\u8259 
\f1 	}Information foraging theory is based on optimal foraging theory, a theory of how predators and prey behave in the wild. Predators sniff for the prey, and follow the scent to the patch where the prey is likely to be. Applying these notions to the domain of information technology, predators (people in need of information) sniff for the prey (the information itself), and follow the scent through cues in the environment to the information patch that contains the prey. Information foraging theory has been shown to mathematically model which web pages human informa- tion foragers select on the web [6], and as a result has become extremely useful as a practical tool for website design and evaluation [7], [32], [48].\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
2.5 PFIS3a\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	
\f3 \uc0\u8259 
\f1 	}Certain code navigations were particularly common, especially in maintenance tasks. At the start of a task in laboratory and field studies, a developer usually searched for a location in the code that could serve as an initial focus point [15]  
\f2\i Questions programmers ask during software evolution tasks
\f1\i0 . These navigations often took the form of keyword-based queries in the IDE to find code textually related to a bug report or feature enhancement request. Over the course of a task, each developer typically began to ask questions about how pieces of code were related, such as through method- invocation [4][15]. Following up on these questions broadened the investigation\'92s scope to include more code. Eventually, each developer learned enough to proceed with making edits. During tasks, developers frequently scrolled between adjacent locations in code [11][13]. Another frequent navigation was to revisit previously read code, whether later in the day [11], later in a particular task [16], or even within seconds of an earlier visit (i.e., \uc0\u8213 jitter
\f3 \uc0\u8214 
\f1 ) [17]. Revisits were most frequent toward the end of each task [16].\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
2.12 PFIS\
\
2.12 PFIS2\

\f2\i Background to Steal
\f1\i0 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	
\f3 \uc0\u8259 
\f1 	}Information foraging theory was developed in the context of understanding web browsing [24, 25, 27].\
{\listtext	
\f3 \uc0\u8259 
\f1 	}The theory applies to information navigation in general, although ap- plication to any new domain requires defining the concepts relative to that domain.\
{\listtext	
\f3 \uc0\u8259 
\f1 	}The first model of information foraging theory was Pirolli and Card\'92s ACT-IF [26]  
\f2\i Pirolli, P. and Card, S. Information foraging, Psychol- ogy Review 106, 4 (1999), 643-675.
\f1\i0 , which models a user foraging for information using the Scatter Gather browser. It is a cogni- tive model, implemented in the ACT-R cognitive architec- ture [2] 
\f2\i Rules of the Mind
\f1\i0 . This evolved into SNIF-ACT which models a user foraging on the web [7]
\f2\i  Information scent as a driver of web behavior graphs: Results of a protocol analysis method for web usability,
\f1\i0 . SNIF-ACT models scent as the relationships between linguistic concepts in a web user\'92s mind. It represents these relationships via a spreading acti- vation network initialized from on-line text corpora. The strength of a relationship between two concepts is assumed to be proportional to the frequency with which they are found near each other in the corpora. This kind of analysis has been shown to provide a good approximation to the way humans\'92 mental associations work [17]. 
\f2\i A solution to Plato's problem: the Latent Semantic Analysis theory of acqui- sition, induction and representation of knowledge. 
\f1\i0 Given a goal (prey), the words in the prey activate nodes in the network. If nodes activated by the goal and words labeling a link have strong associations, they will become more active than words with weak associations. In this way, activation spreads through the network such that activation increases in nodes highly related to the original goal and decays if nodes are weakly or unrelated to the goal.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
2.12 PFIS3b\
\
03.24 Codebook\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls7\ilvl0\cf0 {\listtext	
\f3 \uc0\u8259 
\f1 	}the work artifacts, e.g. code, bugs, specifications, are themselves the objects that link engineers together\
{\listtext	
\f3 \uc0\u8259 
\f1 	}Software development is highly social. A software en- gineer\'92s daily work requires coordination with many other people and tracking many shared artifacts. Today, this coor- dination and tracking is largely accomplished through fre- quent communication and monitoring of artifacts: attend- ing meetings; chatting in the hallway; reading code revi- sion messages; examining work item statuses; exchanging emails; and so on. These coordination activities both take time away from technical work and are subject to the usual communication breakdowns, like untimely, inaccurate, mis- directed or missing information.\
{\listtext	
\f3 \uc0\u8259 
\f1 	}ion histories, work item repositories and email archives. The graph has different kinds of edges to represent the relationships inferred from these data silos. \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
}