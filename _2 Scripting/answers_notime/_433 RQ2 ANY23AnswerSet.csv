body,Asker,Answered,Answered by
"GitHub user lewismc opened a pull request:        https://github.com/apache/any23/pull/30        ANY23-297 Any23 doesn't build under JDK1.8        This issue addresses https://issues.apache.org/jira/browse/ANY23-297      @ansell can you please check how this affects your open pull request? Do you have any objections to merging this into master branch? Thanks    You can merge this pull request into a Git repository by running:        $ git pull https://github.com/lewismc/any23 ANY23-297    Alternatively you can review and apply these changes as the patch at:        https://github.com/apache/any23/pull/30.patch    To close this pull request, make a commit to your master/trunk branch  with (at least) the following in the commit message:        This closes #30        ----  commit bb55685859a26b36ca4a9893bb93aa9eb7687b8c  Author: Lewis John McGibbney <lewis.mcgibbney@gmail.com>  Date:   2016-11-25T21:33:57Z        ANY23-297 Any23 doesn't build under JDK1.8    ----  ",ASF GitHub Bot,,
"Github user lewismc commented on the issue:        https://github.com/apache/any23/pull/30          Hi @ansell any objections to merging into master branch? Seems the like the semargl issues are progressing which is great, however I don't think that should block us here in Any23. I'll commit by CoB today unless there are objections. Thanks  ",ASF GitHub Bot,1,ASF GitHub Bot
"I agree [~thomas.francart], are you working off of master branch? If so, are you able to provide us with a patch and a test case if possible?",Lewis John McGibbney,1,Thomas Francart
Github user lewismc commented on the pull request:        https://github.com/apache/any23/pull/24#issuecomment-212761670          Anyone get a chance to take a look at this? This is THE critical issue for Any23 to address right now IMHO.  ,,,
"Github user ansell commented on the issue:        https://github.com/apache/any23/pull/24          There are a large number of whitespace modifications to change from tabs to 2-space indentation. Is 2-space indentation what Any23 is aiming for, given that most java code is either tab or 4-space indentation.  ",,,
"Github user ansell commented on the issue:        https://github.com/apache/any23/pull/27          I rebased this to fix the conflicts. There are some test failures, some of which I @Ignore'd while other I left so far. Could you have a look in to see if you can figure out why the tests that have been ignored or still failing are broken?  ",,,
Github user lewismc commented on the issue:        https://github.com/apache/any23/pull/27          Hi @ansell whats the current state of this patch? Thanks for merging in the PR.  ,,,
Github user lewismc commented on the issue:        https://github.com/apache/any23/pull/27          Hi @ansell this is starting to look REALLY good. I've pulled your suggestions. I did notice that the appassembler is still generated in the core/target/appassembler. I think that this can be removed based upon the suggestion for CLI to be modularized as you've implemented.      Is there anything else you want to add to this patch? If not then I suggest we merge into master.   ,,,
[~p_ansell] is this the issue which is leading to the unstable builds?,Lewis John McGibbney,1,Peter Ansell
"bq. There also appear to be a changed (lower, unless the junit assertEquals was applied backwards) number of extractors than expected.    Hi [~p_ansell] what do you mean by this :(",Lewis John McGibbney,1,Peter Ansell
"I added implementations of Sesame RDFParser's for common OWL formats, including Manchester Syntax, Functional Syntax (using the obo to owl algorithm that is in owlapi), and OWL/XML to owlapi-rio:4. See the list at:    https://github.com/owlcs/owlapi/blob/version4/rio/src/main/resources/META-INF/services/org.openrdf.rio.RDFParserFactory    As OWL isn't an input format, per se, which particular format were you wanting to target?",Peter Ansell,1,Lewis John McGibbney
Github user lewismc commented on the pull request:        https://github.com/apache/any23/pull/13#issuecomment-76448755          all tests pass locally. Would be appreciated if someone could confirm.    ,,,
"Github user ansell commented on a diff in the pull request:        https://github.com/apache/any23/pull/17#discussion_r27437088          --- Diff: core/src/main/java/org/apache/any23/validator/rule/MissingItemscopeAttributeValueRule.java ---      @@ -0,0 +1,52 @@      +/*      + * Licensed to the Apache Software Foundation (ASF) under one or more      + * contributor license agreements.  See the NOTICE file distributed with      + * this work for additional information regarding copyright ownership.      + * The ASF licenses this file to You under the Apache License, Version 2.0      + * (the ""License""); you may not use this file except in compliance with      + * the License.  You may obtain a copy of the License at      + *      + *  http://www.apache.org/licenses/LICENSE-2.0      + *      + * Unless required by applicable law or agreed to in writing, software      + * distributed under the License is distributed on an ""AS IS"" BASIS,      + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.      + * See the License for the specific language governing permissions and      + * limitations under the License.      + */      +      +package org.apache.any23.validator.rule;      +      +import org.apache.any23.validator.DOMDocument;      +import org.apache.any23.validator.Fix;      +import org.apache.any23.validator.Rule;      +import org.apache.any23.validator.RuleContext;      +      +/**      + * This fixes missing attribute values for the 'itemscope' attribute,       + * which was be associated with <div> nodes.      + * Typically when such a snippet of XHTML is fed through the       + * {@link org.apache.any23.extractor.rdfa.RDFa11Extractor}, and      + * subsequently to Sesame's {@link org.semarglproject.sesame.rdf.rdfa.SesameRDFaParser},      + * it will result in the following behavior.       + * <pre>      + * {@code      + * [Fatal Error] :23:15: Attribute name ""itemscope"" associated with an element type ""div"" must be followed by the ' = ' character.      + * }      + * </pre>      + * This Fix is an effort to mitigate against that happening.       + *      + */      +public class MissingItemscopeAttributeValueRule implements Fix {      --- End diff --            How is this class recognised or instantiated? META-INF/services/ or another method?  ",,,
Any ideas about this [~p_ansell]. Did you manage to debug where and when rules and/or fixes are invoked and when they are applied?  ,,,
"Github user lewismc commented on the pull request:        https://github.com/apache/any23/pull/17#issuecomment-201537723          hi @ansell OK I've added in the correct rule and fix as well as a test to verify that empty itemscope values are identified and fixed.       Whilst debugging this however the core issue persists. Reasoning for this is that ```RDFa11Extractor extends BaseRDFExtractor``` which inherits the [parser function inputstream parameter](https://github.com/apache/any23/blob/63ba2fc82966cc056a2e475af849154d0dfdcf93/core/src/main/java/org/apache/any23/extractor/rdf/BaseRDFExtractor.java#L105). This input stream is not the 'fixed' steam but the raw document.       The only way I can think around this is for us to        * refactor the [RDFa1.1Extractor](https://github.com/apache/any23/blob/master/core/src/main/java/org/apache/any23/extractor/rdfa/RDFa11Extractor.java) such that it extends [TagSoupDomExtractor](https://github.com/apache/any23/blob/63ba2fc82966cc056a2e475af849154d0dfdcf93/api/src/main/java/org/apache/any23/extractor/Extractor.java#L60) as oppose to (eventually) the [ContentExtractor](https://github.com/apache/any23/blob/63ba2fc82966cc056a2e475af849154d0dfdcf93/api/src/main/java/org/apache/any23/extractor/Extractor.java#L44), or       * undertake a mass refactoring which essentially removes the [ContentExtractor](https://github.com/apache/any23/blob/63ba2fc82966cc056a2e475af849154d0dfdcf93/api/src/main/java/org/apache/any23/extractor/Extractor.java#L44) altogether... this would provide us with a much more flexible and adaptable extraction framework IMHO.            What do you think?  ",,,
"Github user lewismc commented on the pull request:        https://github.com/apache/any23/pull/17#issuecomment-201550510          I agree. Jumping through this in the debugged made me think the same.      I think it is different if Any23 is to be a PURE implementation... But that      is clearly not the case. Any23 fits in best when it can be used to extract      semantics from any old crap input that it is fed. Parsers and extractors      *should not* fail when there is a piece of crap input HTML. Currently,      that's exactly what happens and it is extremely limiting.            I would like to propose that this PR is committed to master as is, we then      open a brand new issue which acts exactly your comments refactoring out      content extractor and reusing the input stream which has been fixed, etc.            Any thoughts Peter? Thanks fr quick response.            On Friday, March 25, 2016, Peter Ansell <notifications@github.com> wrote:            > The system does seem a little too complex for our purposes and isn't      > usable because of that.      >      > Removing generics would be the first step IMO as there are too many      > rawtypes definitions which indicate generics are being used badly.      >      > ContentExtractor may be able to be completely removed instead of being      > refitted into the process after that and the parser should always be set to      > parse as far as practical for our purposes.      >      > It is a little strange that there isn't a buffered, markable, InputStream      > provided for all of the steps to reuse as necessary rather than pushing a      > raw InputStream or other source into different extractors.      >      > —      > You are receiving this because you authored the thread.      > Reply to this email directly or view it on GitHub      > <https://github.com/apache/any23/pull/17#issuecomment-201545776>      >                  --       *Lewis*    ",,,
Github user lewismc commented on the pull request:        https://github.com/apache/any23/pull/17#issuecomment-202702530          @ansell any further comments here? I will try to get to work on the larger issue this week.   ,,,
"Github user lewismc commented on the pull request:        https://github.com/apache/any23/pull/9#issuecomment-55443359          Hi @Timpy thank you so much fo this PR.      I absolutely agree with you that this is a problem as I do not like the look of the BNode hash either, it is useless for many purposes.      For the record, can you please post here what the new outout will look like.      Thank you      p.s. I posted https://issues.apache.org/jira/browse/ANY23-238 so that we can add this to our release report once we release Any23 1.0  ",,,
"[~p_ansell], can you detail the current status of this over on jsonld-java? I feel that it would be best to bake in support in jsonld-java library which we wrap in Any23. Thanks in advance.",Lewis John McGibbney,1,Peter Ansell
"Github user lewismc commented on the pull request:        https://github.com/apache/any23/pull/16#issuecomment-84384643          Ok Peter thank you for looking. This is great. I have not seen the test      failures. Can you please tell me if it is in Any23 or in jsonld-Java?      We could upgrade the Jsonld-Java implementation as well. To the 0.5.1      release            On Saturday, March 21, 2015, Peter Ansell <notifications@github.com> wrote:            > The main bug was that the entire script node was being sent to      > JSONLD-Java, and not just its content.      >      > However, I also made a few other changes while doing that testing.      >      > It turned out that the jsonld was invalid, but somehow the exception when      > parses fail was changed to be silently swallowed, so the only indication      > was that the count was 0. I turned on the exception propagation again (no      > reason it should be swallowed outside of temporary testing).      >      > However, in addition to the 4 tests currently failing on the core tests,      > there are now other tests failing due to an inability to parse ""      > ""      >      > —      > Reply to this email directly or view it on GitHub      > <https://github.com/apache/any23/pull/16#issuecomment-84257478>.      >                  --       *Lewis*    ",ASK github Bot,1,ASF github bot
Hi [~cuibonobo] I am VERY sorry for getting back to you so late.  Right now we have a Microformats2 GSoC project underway so we can definitely sync. Are you up for that?,Lewis John McGibbney,,
"Hi Folks, there is a PR for this now available at   https://github.com/apache/any23/pull/18  Would be great if you guys could help us peer review the patch. Thanks.",Lewis John McGibbney,,
Do you want to do Tomcat monitoring? It would mean less code for us and more reuse of existing monitoring.  We can automate this as well along with the nightly pull script.  wdyt?  I've classified this for 1.1 as it is certainly non-blocking as as the WebService at any23.org will be updated nightly there is no need for us to hold a 1.0 release for this.,Lewis John McGibbney,1,Michele Mostarda
Does Apache have a privacy policy that details this collection of information by Google Analytics?,Peter Ansell,,
"[~p_ansell], I honestly do not know!  I am not really too happy about Google Analytics being part of Any23 source or binary release. It means that everyone who deploys an Any23 server with the Google Analytics code embedded can be tracked!  I am not really too happy with that.  [~michele.mostarda], did you consider adding Tomcat logging metrics instead of Google ones? This would mean that it is down to whoever consumes Any23 to do their own log analysis, not for us to do it for them.",,,
"Hi guys, I used Google Analytics because as you can easily verify other Apache projects already embed it within their landing pages (see for example http://hadoop.apache.org/).  Any metrics provided by Tomcat is not comparable with the informations obtained by Google Analytics like geographic distribution and disambiguation of accesses.  The tracker is embedded only in the demo front-end service page and anybody can customize (change the tracking ID) or remove it.  Suggestions to make it less invasive:  we could perhaps add the tracking ID within the POM so that it is more visible and left it empty in the distributions?  we could add a disclaimer in the README?  Suggestions?  In general I suggest to keep a way to fine track user activity because we need to quantify the usage, the community and the distribution to better improve support.     ",,,
"The fact that some other projects have it doesn't absolve the privacy issue. There are many questions that should have been asked before the tracker was added.     Who is using the information other than yourself and Lewis now or in the future? Was this a request from your employer or just from personal interest?    Why didn't you add a privacy policy when you added the tracker?    Why doesn't the entire project team have access to the information?    I am not sure what you mean by adding information to the POM, but this is certainly something that is never done by any other projects.",,,
Hi Norbert. Are you using the Any23 source code?  Are you able to contribute a patch for this feature?  It would be a nice contribution. ,Lewis John McGibbney,,
what is the plan in this ticket? to integrate MO in any23 in some way?,Stephanie Corlosquet,1,Lewis John McGibbney
"hi [~nisala12], nice patch :)  Does it comply with the following ruleset ""...Note that the global name has a specific semantic in the <meta> element and that the itemprop must not be set when one of the name, http-equiv or charset is already used.""?",Lewis John McGibbney,1,Nisala Mendis
"Hi Lewis John McGibbney,  One thing I have notice in the spec[1] itemprop is stated as ""unimplemented"", and I cant really find a reason behind this labeling. WDYT ?  -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  if the itemprop is set, a user-defined metadata, transparent for the user-agent as the semantics of the metadata is user-specific. Living Standard Unimplemented  -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  Also for the cases other cases name and http-quiv and charset ( attribute type), this labeling has not been used and more information is given for these case where as for the itemprop case no any other information or sample case is provided. ( see examples in the bottom of the the spec ) So my patch is written considering these 3 cases except itemprop.  I am more than happy to include this case of itemprop if more information is available. :)   [1]https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta  Regards  Nisala",Nisala mendis,1,Lewis John McGibbney
"Hey [~lanthaler], do you have any interest in working on this issue? If so I can assign it to you.",Lewis John McGibbney,1,Markus Lanthaler
"[~lewismc], it's been a couple of years since I programmed in Java the last time and I'm not familiar with the code of Any23 either. [~p_ansell], could you look into this please? I think you are quite familiar with both code bases and already have a quite good idea of what would be needed. I don't how much work it would be, but it would perhaps also be interesting to extract JSON-LD embedded in HTML. See http://www.w3.org/TR/json-ld/#embedding-json-ld-in-html-documents    Thanks!",Markus Lanthaler,,
[~p_ansell] integrating this into the extractor/rdf package was pretty straight forward.  Is there anything else you would want to see implemented here?,Lewis John McGibbney,,
"Hi Debmalya, can you submit a patch we can apply against trunk? Thanks for opening this issue.",Lewis John McGibbney,1,Debmalya Jash
"Hi,  Thanks for your mail.  I will feel happy to apply the patch and work for Any23.  I am new to this project. Let me know how to apply patch. Is there any link to follow?  Please give me some time. Is there any date line for this?  Best Regards, Debmalya Jash  On Tue, Apr 2, 2013 at 3:47 AM, Lewis John McGibbney (JIRA) <jira@apache.org  ",Debmalya Jash,1,Lewis John McGibbney
"The only test that is failing for me right now in the core module is testBlankNodesViaURL, so the RDFSchemaUtilsTest is working for me.  Could you post your java and maven versions (mvn -version and java -version) here",Peter Ansell,1,Debmalya Jash
Could you also post the output of:  core/target/surefire-reports/org.apache.any23.util.DiscoveryUtilsTest.txt   After you revert your changes to RDFSchemaUtilsTest and post the output of:  core/target/surefire-reports/org.apache.any23.vocab.RDFSchemaUtilsTest.txt,Peter Ansell,1,Debmalya Jash
So RDFSchemaUtilsTest is working now for you after you reverted your changes to it?,Peter Ansell,1,Debmalya Jash
http://purl.org/dc/terms/ doesn't look to be deprecated. Are you thinking of http://purl.org/dc/elements/1.1/ ?,Peter Ansell,1,Lewis John McGibbney
Well its a redirect right?  Which URI so we use as the NS?,Lewis John McGibbney,1,Peter Ansell
"I am not sure what you mean. Everyone I know is still using http://purl.org/dc/terms/ for current applications, although older applications may still support http://purl.org/dc/elements/1.1/.   The DCTERMS vocabulary in Any23 has a small subset of the http://purl.org/dc/terms/ properties, but it could definitely be improved, particularly to include the classes.  Most people refer to the dc/elements/1.1 namespace using the prefix ""dc"", with the newer dc/terms either being ""dcterms"" or ""dct"". Is that part of the confusion?",Peter Ansell,1,Lewis John McGibbney
What do you suggest then Peter? I am happy to go with a positive consensus on this one.,Lewis John McGibbney,,
"{bq}My preference is for all uppercase vocabulary class names if the commonly used prefix is an acronym, and camel-case where it is not, however, in some cases that distinction is not necessarily clear.{bq} OK so in an attempt to move towards a more appropriate (partial) solution... the DOAP vocab would remain named as DOAP and LIKF-Core would be  changed to CamelCase e.g. LKIFCoreAction, etc... Can you confirm? It appears that this was not so much of a pressing issue before Simo pointed it out and you commented. This being said I appreciate that and I think it is important to get it right :)  {bq}To clear up the naming I would prefer if we avoided the getInstance() pattern.... like access to the properties without storing them in a local private field to get around the getInstance() call.{bq} Excuse me if I am wrong, but I see this as a fundamental different issue from renaming of classes. Can we address this more directly in a related but separate issue?",Lewis John McGibbney,,
patch for trunk which addresses comments and concerns.  If someone can review we can sort this one out.  Thank you  ,,,
"I can't seem to apply either of the patches using ""patch -p0 < ANY23-144.patch"" or similar for ANY23-144-v2.patch. Do you need to apply both of the patches to get it to work, because that wasn't working for me either but I may just be doing something wrong?  What command have you been using the apply the patches?  ",,,
Expected release date of Sesame 2.7.0 has been set for about 3 weeks time. Is it worth waiting until then to release 0.8.0 or should we still focus on 0.9.0?,,,
"Sesame-2.7.0 is now available, and the Git repository is now writable. What should we do about this issue?",,,
"Hi [~simone.tripodi], can you provide some guidance as to this one? Do you have any 'typical' steps or guidance which we could work on? Thanks",,,
Hi Lev. You've marked this issue as being related to a number of other issues. Can you please provide info on how many of these have been addressed within the scope of your proposal? Thank you. ,,,
I think it would be great to push on with this RDFa proposal then make an interim release for Any23. Is anyone interested in working to get this done? This issue (with a few others) would IMO justify pushing an RC for 0.9.0. Any thought please?,,,
Is there still any glue code that needs to be written to achieve this? or is ready for testing? Are there any instructions somewhere on how to build any23 with this patch so I can test it?,,,
What's the status of this issue to merge semargl into Any23? Is there anything I can test to make progress?,,,
Hi!  I've prepared pull request to fix RDFa related tests. See https://github.com/apache/any23/pull/2 . Are there any other things to do with this branch?,,,
"Success. I tested https://github.com/apache/any23/pull/2 on ubuntu 13.04 and it worked with java 1.7.0_51 and mvn 3.0.4! Not sure why it's not working on Mac OS X, do I need java 7?",,,
"Thanks, Stephane!    Completely missed that RDFa was used as a part of extraction process in other tests.  I've added related fixes.     Brief description.    *ServletTest*  Old RDFa implementation produces  {{<issue level=""Warning"" row=""14"" col=""5"">Error while processing node /HTML(1)/HEAD(1)/META(9) : 'Cannot map prefix 'fb''</issue>}}  while {{<fb:app_id>}} is completely valid predicate which shouldn't be resolved against fb: prefix.    *Any23Test*  *RoverTest*  Changed RDFXMLWriter to NTriplesWriter in some tests to improve precision (they basically check line count).  Changed expected triples count. It was reduced in most cases, because old RDFa parsed produced a lot of invalid triples like:    {quote}  <http://host.com/service> <http://host.com/serviceexternal> <http://host.com/service/ambiente/> .  <http://host.com/service> <http://host.com/serviceexternal> <http://host.com/service/salute/> .  <http://host.com/service> <http://host.com/serviceexternal> <http://host.com/service/legalita/> .  <http://host.com/service> <http://host.com/serviceexternal> <http://www.ansamed.info/> .  <http://host.com/service> <http://host.com/serviceexternal> <http://host.com/service/web/notizie/regioni/lazio/provinciadiroma/> .  {quote}    Fixed markup in {{test-resources/src/test/resources/html/rdfa/ansa_2010-02-26_12645863.html}} to conform declared XHTML 1.0 Strict.  Fixed RDFa markup in {{test-resources/src/test/resources/html/encoding-test.html}} otherwise it shouldn't produce any triples.  Disabled second part of {{Any23Test.testExtractionParameters}}. Should it do anything after RDFa parser replacement?    Also, ExtractionException thrown from BaseRDFExtractor is escalated in test suite. It leads to some failed tests in Any23Test. What's the correct behaviour for ANY23 parser in case it gets SAXException?  ",,,
Will you have time to work on this before the 0.8.0 release or is it okay to postpone it to 0.9.0?,,,
"[~lewismc] I'm failing to understand the point of this story. The purpose of the Semantic Web is that parsing tools like any23 should be vocabulary agnostic. Baking support for a whole load of vocab is by design out dated as soon as it ships, given that vocabularies tend to evolve (e.g. schema.org). Maybe if you explaine what you are trying to achieve I will be better able to help...",,,
".bq The purpose of the Semantic Web is that parsing tools like any23 should be vocabulary agnostic.  Yes of course. I take your point. However if we are not namespace (or more appropriately vocabulary) aware then do we just _expect_ to recognize some namespace declarations?    .bq ...is by design out dated as soon as it ships, given that vocabularies tend to evolve (e.g. schema.org).  I need to disagree here. I would agree if you had added ""given that _some_ vocabularies...""   Some vocab's do evolve you are right. You've picked probably the most dynamic of all as your example however this ignores the point that _some_ are not as dynamic.   For example, I added some Legal vocab's for a specific project I was working on. These may or may not be useful to other people. I also know that the vocabularly has NOT changed, therefore they are as useful now as they were when I wrote the implementation.  If you navigate to the BBC vocabularies you will also see that these are well established and are not as dynamic as you may indicate.  Furthermore, by implementing other developers' vocabularies we are directly inviting those same developers to use Any23 as a tool for extracting triples from their markup. Personally I've reached out the DOAP and LKIF communities to state that we are now namespace aware. This is the wider goal.  I hope this provides some justification behind my reasoning on this one.     ",,,
Has this got anything to do with Any23?,,,
I honestly didn't realise that this was committed. Have you verified it works Peter? I will try tomorrow ,,,
One fix for this may be to create a Sesame Sail implementation that can talk to TDB. Has anyone looked into this before?,,,
[~andy.seaborne] [~rvesse] [~p_ansell] what do you think is the best implementation here? I am _thinking_ towards a more abstract interface which wouldn't just restrict us to TDB. Is there anything out there which I could use?,,,
"So this has been addressed right? It doesn't quite look like what you implemented in your commit @ r1371537 is what you initially proposed, but all seems well anyway.",,,
"Having had a browse of both o.a.a.vocab.RDFSchemaUtils, and o.a.a.rdf.RDFUtils respectively, I understand where you are coming from. I also notice that you propose a more generic factory type implementation similar to Tika which (based on some criteria) guesses the specific parser which should be used per situation. What other mimetypes would we encounter other than the ones mentioned in both of the above classes as specified within the hardcoded RDFParsers?  I am interested to find out what you think. Thank you    ",,,
"Hi Peter,     {bq} I am not familiar enough with the rest of the codebase to know why the shortlist of supported parsers is in place [bq}    Although I have tried to get to grips with as much of the codebase as I have a use-case for, I am sorry as I cannot provide insight into the original design considerations which you refer to... maybe one of the other guys could chime in here and clear the picture for us?    I must admit though, I am in agreement with your overall analysis and think that the more extensible we can make the Any23 libraries the better. There was some discussion however over in ANY23-19 where the vision was to have an abstraction layer between Any23 and the underlying RDF API's. In my opinion, this would provide far greater potential for us to make Any23 a more flexible library... wdyt?",,,
I like these two patches and based on the conversation on any23-dev give the +1. Marking for 0.7.0 and happy to commit on behalf of Peter unless there are objections?  ,,,
"I rebased my git repository onto a copy of the current trunk to check how many patches I still had in this area and noticed that RDFSchemaUtils still hardcodes the supported formats. I may not be seeing the significance of VocabularyFormat currently, but I assume that it could be generalised to any RDFFormat.    Is it related to the ability to type in a human readable alias for the format in VocabPrinter? If so, have you tried using RDFFormat.valueOf(String) in the converter inside VocabPrinter which matches against registered formats using:        format.getName().equalsIgnoreCase(formatName)    These names may not exactly match the historical names for each format that were previously used, but they are extensible at runtime so it makes RDFSchemaUtils easier to maintain. This may also help with ANY23-3 as N3 would be available, although it would just be the Turtle subset in practice as we only hold RDF triples in memory.",,,
"Setting for 0.7.0-incubating.  Is it possible for you to explain a bit about the patch and the underlying reason as to why the existing parser implementation seems to clog up? Also this is really trivial but can you please have a look at the coding format if it differs or not. My initial thoughts of the patch are great, it's a nice one to have caught, but some additional explanation would really help us out. Thank you very much. Lewis",,,
"Yep, unfortunately, as Lewis put it they are ""horrible for searching"". I usually end up doing searches elsewhere.  Is there a way to search on the Apache mail archive?",,,
Does this duplicate ANY23-7 ?,,,
"Yeah OK thnaks for clarification. The W3C guys that chimed in on the thread on any23-dev, stated that they would like us to produce this by the end of the month so we have plenty of time to cook something up. I had a look into the RDFa 1.1. spec, and subsequently into the EARL spec... unsurprisingly it's left me a bit puzzled as to how to pull this together so I was going to start a thread on our dev list. However this is as good a place as any I suppose. Have you any initial thoughts Michele?  ",,,
"Well, last night I found that no, it isn't working flawlessly. I was just looking at the whole thing again to trace what is going wrong.    I was about to send my XSLT file to the Sindice-dev mailing list, to bridge the period between now and the moment Sindice starts using Any23 0.7.0, when I thought of an edge case to test against. My stylesheet doesn't handle it well, and neither does my build from the SVN code.  The case: when a prefix attribute contains ""rnews:http://www.iptc.org/std/rNews/1.0: foaf:http://xmlns.com/foaf/0.1/ dbpedia:http://dbpedia.org/resource/"" (no space between prefix name and prefix URI, but at least one prefix URI ending with a colon), my stylesheet wrongly assumes there are spaces between prefix name and prefix URI, because it tests whether the attribute contains "": "". The RDFa11Parser outputs warnings that it cannot map the foaf prefix when I test it on my 0.7.0 build.  It is an edge test case because it is invalid content for a prefix attribute, but since I saw that Any23 is accepting / testing against no-space prefix definitions and I think namespace URIs with a colon are valid (e.g. <http://dbpedia.org/resource/Category:>), I figured it made an interesting test case. I sent the file anyway, with this test result too :)    Another issue I have is that the RDFa11Parser doesn't infer the right triples from <link> elements with a @rel in the <head> section. I believe the @rel values ""icon"", ""stylesheet"", ""bookmark"" etc are to be treated specially. Sindice (Any23 0.6.1) produces URIs for these like <http://www.w3.org/1999/xhtml/vocab#icon> from my blog post. When I extract from my blog post locally, I get properties like <http://ben.companjen.name/2011/08/het-gezin-timmer-de-bruijn-in-amsterdam/icon>.  The parser (also) complains my HTML doesn't declare 'xmlns=""http://www.w3.org/1999/xhtml""'. I couldn't find the part of the HTML or RDFa specifications that says it should do so - as far as I can tell it's not necessary in HTML5.  Looking at the code, I see some references to RDFa 1.0 in the comments in the processDocument method. This method seems to be the source for the complaint. Maybe the problem and complaint (well, warning actually) are linked? And maybe the incorrect handling of the @rel values is also linked to ""// TODO: introduce support for RDFa profiles. (http://www.w3.org/TR/rdfa-core/#s_profiles)""? BTW, these profiles don't exist (anymore) in RDFa Core.  I hope someone can shed more light on this, I'm too confused from reading all the RDFa related docs and drafts right now ;)",,,
"The repo directory is a maven repository. Are the artifacts in this directory in another maven repository?  We are currently deploying snapshots to the Apache Snapshots repository and new releases to the Apache staging server, based on the definitions in the apache-10.pom parent.  http://svn.apache.org/repos/asf/maven/pom/tags/apache-10/pom.xml",,,
i had a look to the patch and it looks very nice.   If the META-INF data is built at compile time and it is not necessary to package the plugins to annotate them I don't have any other concern about applying this simplification.  How does it work /does it work the hot-loading with ServiceLoader?,,,
"Hola!    META-INF/services metadata are always generated at compile time, indeed plugins are annotated with [@MetaInfService|http://weblogs.java.net/blog/kohsuke/archive/2009/03/my_project_of_t.html] that is part of a provided-scope Annotation Processor wrote by Kohsuke (the Hudson/Jenkin's father)    In Any23 the ServiceLoader is used inside the the Any23PluginManager, relying on the already managed dynamic ClassLoader, so when adding new jars/resources at runtime to the ClassLoader, SL queries it.    I think that the same strategy can be applied to Extractors' factories as well, WDYT?    Anyway, please double-ack if you agree I can commit the modification!  TIA!",,,
"I think this should definitely be commited? Once question, is there anything specific about the Any23 plugin system which make this issue only applicable to Any23? What I mean, is would it be possible to aplly this issue in a project elsewhere which relies heavily on plugins? (e.g. Nutch)",,,
"OK so Committed @ revision 1303963 in site  I also committed some changes to trunk but I can't remember which revision.    If someone could please review where we are with this one, unless someone can point me to further improvement (which obviously I'm very open to) then I'd like to close this one off so we can focus on some of the other issues which lie between us and the 0.7.0-incubating release.    Thanks",,,
"Thanks Andy. Taking this forward, obviously we can copy in Any23-dev@ anyway, but do we wish to combine these resources requests to infra@, e.g. is there any way that we can share resources to limit the infra@ involvement if you were wanting to bring the SPARQL stuff to ASF as well? ",,,
"@Lewis, you mean org.apache.any23.util.LogUtils or what?  That one is used to activate / deactivate the verbose mode of CLI tools by changing the log level programmatically.",,,
Upon closer inspection looks like your correct Michele.    What about we re-factor this issue to address Simone's opinions? I'm a +1 for Slf4j  ,,,
I genuinely have not got a clue what has to be done to resolve this one. I've tried using the maven changes plugin but getting nowhere. Anyone else got a scooby?,,,
Isn't this issue related to Any23 history munging?,,,
"I attempted to replace the classes with public implementations, but the once found   within the classpath are marked as @deprecated.    Ideas?    {code}  -import com.sun.org.apache.xml.internal.serialize.OutputFormat;  -import com.sun.org.apache.xml.internal.serialize.XMLSerializer;  +import org.apache.xml.serialize.OutputFormat;  +import org.apache.xml.serialize.XMLSerializer;  {code}",,,
"Are you getting this from your compiler output? I've not tried to implement yet. We don't explicitly depend upon any xerces related stuff in the parent pom.xml, so I am curious where the imports are being pulled from for you to get this output. ",,,
"Thanks Mic for reporting! I need indeed doing more work on the service, my bad that I didn't notice!  there is a specialized README in the produces distribution package that explains how to install&run, can you double chek please?  TIA!",,,
"Hi Peter. Regarding your edited comment above. Have you started/finished work on the Extractor factory patterns? I would like to get this issue integrated into trunk... therefore I need to test it. If the answer to the above is yes, are you able to produce a patch which I can apply to the SVN trunk HEAD? Thank you",,,
Has anyone else had the opportunity to test Peters patches? There are some trivial issues which we have discussed off list but generally speaking the spi and tika upgrades look dynamite to me. I also confirm that all tests pass locally for these patches.,,,
Is there an automated tool for doing this? ,,,
"Hey Paolo, with regards to Chris' recent comments on the dev list and the stub report he filed, how did you get on wrt moving away from the packages you've highlighted above and also with progressing with more collaboration between ASF RDF-type projects? I'm using this issue as a basis to kick the converation off and hopefully others will join in. ",,,
"Hi Max, the thing is: adding yet another dependency is going to make Any23 bigger and more complex.   Can something simple be done without adding yet another dependency?  As I said, an example of a small RDF distiller which does this is java-rdfa (https://github.com/shellac/java-rdfa). Third party RDF APIs become only an optional dependency and people are free to choose which one they want/need simply adding that to their classpath (in a very similar way to what SLF4j does for logging frameworks).  The only thing tricky is ""validation"", but Any23 could chose not to validate URLs/IRIs, etc. and simply relay on the third party RDF APIs to do that.",,,
"Hi Paolo,    The example library that is continually being referred to here, java-rdfa, abstracts away from clerezza, sesame and jena interfaces by representing everything as strings. See https://github.com/shellac/java-rdfa/blob/master/core/src/main/java/net/rootdev/javardfa/StatementSink.java The java-rdfa library is also not being developed or used actively, so it isn't the best example of a successful library that doesn't use a type-safe RDF Statement/Value API. I worked on java-rdfa a little but there is no push behind it. Even its author refers to it as ""The cruftiest RDFa parser in the world""    Two of the three goals of Any23, command line utility, and web service, are completely ambivalent to the technology being used internally, as long as it is high quality, and the Sesame libraries are very high quality in my opinion and experience. The only goal that would be affected would be the use of Any23 as a library. How often is Any23 currently being used as a library? Could another project easily implement the same functionality using Jena with less effort than it would take to either create a custom string based solution, or move to another framework that may have just as many or more dependencies?    In terms of the use of Any23 as a library, is there anything about the Sesame Model hierarchy (Value/Resource/Literal/BNode/URI) that would be better represented using a custom solution? As one example, I have been working with OWLAPI recently and its RDF handling is shocking, it merges URIs with Blank Nodes to form what it refers to as IRIs. It has a custom internal solution that only recognises two types of triples, those with an IRI in the object position (where IRI is not type-safely defined between URI and BlankNode) and those with Literals in the object position. I can't imagine Any23 going down this route, but it is the worst case scenario if the API is converted without a reason. In the simplest scenario, it may be possible to reuse the Sesame Model hierarchy to produce Values that work across all three libraries, using custom ValueImpl etc., implementations that actually implement the relevant interfaces from other libraries, along a custom ValueFactory to produce these multi-library-compatible Values (custom ValueFactories can be plugged into any Rio Parser using Rio.getParser(RDFFormat, ValueFactory), a functionality which I haven't seen in other libraries).    In terms of the actual packages that are currently used, there are four basic packages sesame-model, sesame-rio-api, sesame-repository-api, sesame-sail-api, sesame-sail-memory. These base libraries are small dependencies. One other dependency is some small utilities, sesame-util that are used by sesame-model and other sesame libraries.    82K - sesame-model-2.6.5.jar  36K - sesame-repository-api-2.6.5.jar  22K - sesame-rio-api-2.6.5.jar  56K - sesame-sail-api-2.6.5.jar  54K - sesame-sail-memory-2.6.5.jar  53K - sesame-util-2.6.5.jar    The value Impl classes should not be directly referenced. They should be accessed using a ValueFactory and used as their Interfaces. This doesn't change any of the libraries that are used, but it is better practice.    The other libraries that pull in the Rio parsers can be linked in dynamically without compiling in the dependency, so the use of Any23 as a library would enable people to pull them in as needed. See Rio.getParser(RDFFormat, ValueFactory) and Rio.getWriter(RDFFormat) methods. It would be valuable if Any23 could dynamically pull in all of its parsers and writers using the Rio.* static methods. Then it could be used with the absolute minimum number of parsers and writers for the current user.     4.6K - sesame-rio-n3-2.6.5.jar  14K - sesame-rio-ntriples-2.6.5.jar  33K - sesame-rio-rdfxml-2.6.5.jar  17K - sesame-rio-turtle-2.6.5.jar    Switching to another library may cause the bloat that you say you do not want.    For example, Jena and its immediate dependencies is quite large compared to the modular sesame jar files, and that doesn't include the SPARQL parsing libraries from ARQ, as indeed the sesame libraries quote above do not include the sparql libraries.    1.7M - jena-core-2.7.0-incubating.jar  151K - jena-iri-0.9.0-incubating.jar  3.1M - icu4j-3.4.4.jar  1.4M - xercesImpl-2.10.0.jar  ",,,
"Ciao Michele, what are the problems you found with java-rdfa?  There is an open issue for java-rdfa to add RDFa 1.1 support (https://github.com/shellac/java-rdfa/issues/24).  In any case, good to see the XSLT replaced by a new programmatic RDFa extractor.",,,
"I've updated the w3c page above, but can't seem to create an account for the RDFizers!!!    Is there anything else we wish to add to this issue? I think it goes to say that at any given opportunity make people aware of Any23.  ",,,
I think this certainly duplicates ANY23-69 ?,,,
Is this not addressed?,,,
"Are there any full N3 implementations in Java?     Sesame and Jena both parse the RDF subset, but not the full N3 grammar. In practice, the RDF subset amounts to Turtle.    Is Any23 interested in the non-RDF components of N3?",,,
"@Peter, Are you interested in committing this  in line with thr new SPI Factory implementation you wrote? ",,,